{"version":3,"sources":["redux/constants.js","redux/store.js","components/calendar/Month.js","components/calendar/Months.js","components/DateForm.js","components/EventForm.js","App.js","index.js"],"names":["currentDate","Date","daysNames","namesOfMonths","availableYears","i","getFullYear","push","years","getYear","state","year","getMonth","month","getDay","day","getWeek","week","getEvents","events","getIsShownEventForm","isShownEventForm","getEventSelectorValue","eventSelectorValue","setYear","type","setMonth","setDay","setWeek","setIsShownEventForm","isShown","initialState","store","createStore","action","id","date","title","mark","selector","connect","currentMonthOfYear","firstDay","currentDay","emptyDays","currentMonth","name","dayOfMonths","tempDate","setDate","getDate","openEventForm","dayNumber","monthNumber","getId","toString","className","map","dayName","slice","length","onClick","find","elem","filter","includes","ev","cn","Months","setEventSelectorValue","setters","handleSelect","key","value","target","onChange","event","required","oneYear","oneMonth","oneWeek","setEvents","useState","setTitle","setMark","onSubmit","preventDefault","placeholder","htmlFor","mapDispatchToProps","changeMonth","param","datePlus","dateMinus","changeYear","changeWeek","disabled","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.d86981f9.chunk.js","sourcesContent":["export const currentDate = new Date();\n\nexport const daysNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\nexport const namesOfMonths = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\nconst availableYears = [];\n\nfor (let i = 1800; i <= currentDate.getFullYear() + 100; i += 1) {\n  availableYears.push(i);\n}\n\nexport const years = [...availableYears];\n","import { createStore } from 'redux';\nimport { currentDate } from './constants';\n\nexport const SET_YEAR = 'SET_YEAR';\nexport const SET_MONTH = 'SET_MONTH';\nexport const SET_DAY = 'SET_DAY';\nexport const SET_WEEK = 'SET_WEEK';\nexport const SET_EVENTS = 'SET_EVENTS';\nexport const SET_IS_SHOWN_EVENT_FORM = 'SET_IS_SHOWN_EVENT_FORM';\nexport const SET_EVENT_SELECTOR_VALUE = 'SET_EVENT_SELECTOR_VALUE';\n\nexport const getYear = state => state.year;\nexport const getMonth = state => state.month;\nexport const getDay = state => state.day;\nexport const getWeek = state => state.week;\nexport const getEvents = state => state.events;\nexport const getIsShownEventForm = state => state.isShownEventForm;\nexport const getEventSelectorValue = state => state.eventSelectorValue;\n\nexport const setYear = year => ({\n  type: SET_YEAR,\n  year,\n});\n\nexport const setMonth = month => ({\n  type: SET_MONTH,\n  month,\n});\n\nexport const setDay = day => ({\n  type: SET_DAY,\n  day,\n});\n\nexport const setWeek = week => ({\n  type: SET_WEEK,\n  week,\n});\n\nexport const setEvents = (date, title, mark) => ({\n  type: SET_EVENTS,\n  date,\n  title,\n  mark,\n});\n\nexport const setIsShownEventForm = isShown => ({\n  type: SET_IS_SHOWN_EVENT_FORM,\n  isShown,\n});\n\nexport const setEventSelectorValue = selector => ({\n  type: SET_EVENT_SELECTOR_VALUE,\n  selector,\n});\n\nconst initialState = {\n  year: currentDate.getFullYear(),\n  month: '',\n  day: '',\n  week: '',\n  events: [],\n  isShownEventForm: false,\n  eventSelectorValue: '',\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case SET_YEAR:\n      return {\n        ...state,\n        year: action.year,\n      };\n    case SET_MONTH:\n      return {\n        ...state,\n        month: action.month === '' ? '' : +action.month,\n      };\n    case SET_DAY:\n      return {\n        ...state,\n        day: action.day,\n      };\n    case SET_WEEK:\n      return {\n        ...state,\n        week: action.week === '' ? '' : +action.week,\n      };\n    case SET_EVENTS:\n      return {\n        ...state,\n        events: [\n          ...state.events,\n          {\n            id: action.date,\n            title: action.title,\n            mark: action.mark,\n          },\n        ],\n      };\n    case SET_IS_SHOWN_EVENT_FORM:\n      return {\n        ...state,\n        isShownEventForm: action.isShown,\n      };\n    case SET_EVENT_SELECTOR_VALUE:\n      return {\n        ...state,\n        eventSelectorValue: action.selector,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer, initialState);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport cn from 'classnames';\nimport { getDay, getMonth, getYear, getWeek,\n  getIsShownEventForm, setIsShownEventForm, setDay,\n  getEvents, getEventSelectorValue, setMonth,\n} from '../../redux/store';\nimport { namesOfMonths, daysNames } from '../../redux/constants';\n\nconst Month = ({\n  month,\n  year,\n  week,\n  setDay,\n  setIsShownEventForm,\n  events,\n  eventSelectorValue,\n  setMonth,\n}) => {\n  const firstDay = new Date(year, month);\n  const currentDay = firstDay.getDay();\n  const emptyDays = [];\n\n  for (let i = 0; i < currentDay; i += 1) {\n    emptyDays.push('');\n  }\n\n  const currentMonth = firstDay.getMonth();\n  const name = namesOfMonths[currentMonth];\n  const dayOfMonths = [];\n  const tempDate = firstDay;\n\n  for (let i = 1; i <= 31; i += 1) {\n    if (tempDate.getMonth() === month) {\n      dayOfMonths.push(i);\n    }\n\n    tempDate.setDate(tempDate.getDate() + 1);\n  }\n\n  const openEventForm = (dayNumber, monthNumber) => {\n    setMonth(monthNumber);\n    setDay(dayNumber);\n    setIsShownEventForm(true);\n  };\n\n  const getId = (day) => {\n    const id = new Date(year, month, day);\n\n    return id.toString();\n  };\n\n  return (\n    <table className=\"table\">\n      <caption className=\"table__caption\">\n        {name}\n      </caption>\n      <thead>\n        <tr className=\"table__caption--days\">\n          {daysNames.map(dayName => <th>{dayName}</th>)}\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          {(week === 0 || week === '') && emptyDays\n            .map(day => <td className=\"table__td table__td--empty\">{day}</td>)}\n          {(week === 0 || week === '') && dayOfMonths\n            .slice(0, 7 - emptyDays.length)\n            .map(day => (\n              <td\n                className=\"table__td\"\n                onClick={() => openEventForm(day, month)}\n              >\n                <div className=\"wrapper__td\">\n                  {day}\n                </div>\n                <ul>\n                  {events.find(elem => elem.id === getId(day))\n                  && events\n                    .filter(elem => (elem.id === getId(\n                      day && elem.mark.includes(eventSelectorValue)\n                    )))\n                    .map(ev => (\n                      <li className={cn(\n                        'table__li',\n                        { 'table__li--necessary': ev.mark === 'necessary' },\n                        { 'table__li--important': ev.mark === 'important' },\n                        { 'table__li--meeting ': ev.mark === 'meeting' },\n                      )}\n                      >\n                        {ev.title}\n                      </li>\n                    ))}\n                </ul>\n              </td>\n            ))}\n        </tr>\n        <tr>\n          {(week === 1 || week === '') && dayOfMonths\n            .slice(7 - emptyDays.length, 14 - emptyDays.length)\n            .map(day => (\n              <td\n                className=\"table__td\"\n                onClick={() => openEventForm(day, month)}\n              >\n                <div className=\"wrapper__td\">\n                  {day}\n                </div>\n                <ul>\n                  {events.find(elem => elem.id === getId(day))\n                  && events\n                    .filter(elem => (\n                      elem.id === getId(day)\n                      && elem.mark.includes(eventSelectorValue)\n                    ))\n                    .map(ev => (\n                      <li className={cn(\n                        'table__li',\n                        { 'table__li--necessary': ev.mark === 'necessary' },\n                        { 'table__li--important': ev.mark === 'important' },\n                        { 'table__li--meeting ': ev.mark === 'meeting' },\n                      )}\n                      >\n                        {ev.title}\n                      </li>\n                    ))}\n                </ul>\n              </td>\n            ))}\n        </tr>\n        <tr>\n          {(week === 2 || week === '') && dayOfMonths\n            .slice(14 - emptyDays.length, 21 - emptyDays.length)\n            .map(day => (\n              <td\n                className=\"table__td\"\n                onClick={() => openEventForm(day, month)}\n              >\n                <div className=\"wrapper__td\">\n                  {day}\n                </div>\n                <ul>\n                  {events.find(elem => elem.id === getId(day))\n                  && events\n                    .filter(elem => (\n                      elem.id === getId(day)\n                      && elem.mark.includes(eventSelectorValue)\n                    ))\n                    .map(ev => (\n                      <li className={cn(\n                        'table__li',\n                        { 'table__li--necessary': ev.mark === 'necessary' },\n                        { 'table__li--important': ev.mark === 'important' },\n                        { 'table__li--meeting ': ev.mark === 'meeting' },\n                      )}\n                      >\n                        {ev.title}\n                      </li>\n                    ))}\n                </ul>\n              </td>\n            ))}\n        </tr>\n        <tr>\n          {(week === 3 || week === '') && dayOfMonths\n            .slice(21 - emptyDays.length, 28 - emptyDays.length)\n            .map(day => (\n              <td\n                className=\"table__td\"\n                onClick={() => openEventForm(day, month)}\n              >\n                <div className=\"wrapper__td\">\n                  {day}\n                </div>\n                <ul>\n                  {events.find(elem => elem.id === getId(day))\n                  && events\n                    .filter(elem => (\n                      elem.id === getId(day)\n                      && elem.mark.includes(eventSelectorValue)\n                    ))\n                    .map(ev => (\n                      <li className={cn(\n                        'table__li',\n                        { 'table__li--necessary': ev.mark === 'necessary' },\n                        { 'table__li--important': ev.mark === 'important' },\n                        { 'table__li--meeting ': ev.mark === 'meeting' },\n                      )}\n                      >\n                        {ev.title}\n                      </li>\n                    ))}\n                </ul>\n              </td>\n            ))}\n        </tr>\n        <tr>\n          {(week === 4 || week === '') && dayOfMonths\n            .slice(28 - emptyDays.length, 35 - emptyDays.length)\n            .map(day => (\n              <td\n                className=\"table__td\"\n                onClick={() => openEventForm(day, month)}\n              >\n                <div className=\"wrapper__td\">\n                  {day}\n                </div>\n                <ul>\n                  {events.find(elem => elem.id === getId(day))\n                && events\n                  .filter(elem => elem.id === getId(day)\n                    && elem.mark.includes(eventSelectorValue)\n                  )\n                  .map(ev => (\n                    <li className={cn(\n                      'table__li',\n                      { 'table__li--necessary': ev.mark === 'necessary' },\n                      { 'table__li--important': ev.mark === 'important' },\n                      { 'table__li--meeting ': ev.mark === 'meeting' },\n                    )}\n                    >\n                      {ev.title}\n                    </li>))}\n                </ul>\n              </td>\n            ))}\n        </tr>\n      </tbody>\n    </table>\n  );\n};\n\nconst mapStateToProps = state => ({\n  year: getYear(state),\n  currentMonthOfYear: getMonth(state),\n  day: getDay(state),\n  week: getWeek(state),\n  isShownEventForm: getIsShownEventForm(state),\n  events: getEvents(state),\n  eventSelectorValue: getEventSelectorValue(state),\n});\n\nexport default connect(mapStateToProps, {\n  setIsShownEventForm,\n  setDay,\n  setMonth,\n})(Month);\n\nMonth.propTypes = {\n  month: (PropTypes.number || PropTypes.string).isRequired,\n  year: (PropTypes.number || PropTypes.string).isRequired,\n  week: (PropTypes.number || PropTypes.string).isRequired,\n  setDay: PropTypes.func.isRequired,\n  setIsShownEventForm: PropTypes.func.isRequired,\n  events: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    mark: PropTypes.string,\n  })).isRequired,\n  eventSelectorValue: PropTypes.string.isRequired,\n  setMonth: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport Month from './Month';\n\nexport const Months = () => {\n  const months = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n\n  return (\n    months.map(month => (\n      <Month month={month} />\n    ))\n  );\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  getDay, getMonth, getYear, setYear, setDay, setMonth, getWeek, setWeek,\n  setEventSelectorValue, getEventSelectorValue,\n} from '../redux/store';\nimport { namesOfMonths, years } from '../redux/constants';\n\nconst DateForm = ({\n  year,\n  month,\n  week,\n  eventSelectorValue,\n  setYear,\n  setMonth,\n  setDay,\n  setWeek,\n  setEventSelectorValue,\n}) => {\n  const setters = {\n    year: setYear,\n    month: setMonth,\n    day: setDay,\n    week: setWeek,\n    eventSelectorValue: setEventSelectorValue,\n  };\n\n  const handleSelect = ({ target: { value } }, key) => {\n    setters[key](value);\n  };\n\n  return (\n    <header className=\"header\">\n      <select\n        className=\"header__select\"\n        value={year}\n        onChange={event => handleSelect(event, 'year')}\n        required\n      >\n        <option value=\"\">select year</option>\n        {years.map(oneYear => (\n          <option value={oneYear} key={oneYear}>{oneYear}</option>\n        ))}\n      </select>\n      <select\n        className=\"header__select\"\n        value={month}\n        onChange={event => handleSelect(event, 'month')}\n        required\n      >\n        <option value=\"\">all months</option>\n        {namesOfMonths.map((oneMonth, i) => (\n          <option value={i} key={oneMonth}>{oneMonth}</option>\n        ))}\n      </select>\n      <select\n        className=\"header__select\"\n        value={week}\n        onChange={event => handleSelect(event, 'week')}\n        required\n      >\n        <option value=\"\">all weeks</option>\n        {[0, 1, 2, 3, 4].map(oneWeek => (\n          <option value={oneWeek} key={oneWeek}>{oneWeek + 1}</option>\n        ))}\n      </select>\n\n      <select\n        className=\"header__select\"\n        value={eventSelectorValue}\n        onChange={event => handleSelect(event, 'eventSelectorValue')}\n        required\n      >\n        <option value=\"\">all</option>\n        {['necessary', 'important', 'meeting'].map(selector => (\n          <option value={selector} key={selector}>{selector}</option>\n        ))}\n      </select>\n    </header>\n  );\n};\n\nconst mapStateToProps = state => ({\n  year: getYear(state),\n  month: getMonth(state),\n  day: getDay(state),\n  week: getWeek(state),\n  eventSelectorValue: getEventSelectorValue(state),\n});\n\nexport default connect(mapStateToProps,\n  {\n    setYear,\n    setMonth,\n    setDay,\n    setWeek,\n    setEventSelectorValue,\n  })(DateForm);\n\nDateForm.propTypes = {\n  year: (PropTypes.number || PropTypes.string).isRequired,\n  month: (PropTypes.number || PropTypes.string).isRequired,\n  week: (PropTypes.number || PropTypes.string).isRequired,\n  eventSelectorValue: PropTypes.string.isRequired,\n  setYear: PropTypes.func.isRequired,\n  setMonth: PropTypes.func.isRequired,\n  setDay: PropTypes.func.isRequired,\n  setWeek: PropTypes.func.isRequired,\n  setEventSelectorValue: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getYear, getMonth, getDay, getEvents,\n  setEvents, setIsShownEventForm } from '../redux/store';\n\nconst EventForm = ({\n  year,\n  month,\n  day,\n  setEvents,\n  setIsShownEventForm,\n}) => {\n  const [title, setTitle] = useState('');\n  const [mark, setMark] = useState('');\n\n  const handleTitleChange = ({ target: { value } }) => {\n    setTitle(value);\n  };\n\n  const handleSelect = ({ target: { value } }) => {\n    setMark(value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    const date = new Date(year, month, day);\n\n    setEvents(date.toString(), title, mark);\n    setIsShownEventForm(false);\n    setTitle('');\n    setMark('');\n  };\n\n  const goBack = () => {\n    setTitle('');\n    setMark('');\n    setIsShownEventForm(false);\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <form onSubmit={handleSubmit} className=\"form\">\n        <div className=\"form__input\">\n          <input\n            type=\"text\"\n            value={title}\n            placeholder=\"Enter event title\"\n            onChange={handleTitleChange}\n            required\n          />\n        </div>\n        <div className=\"form__radio\">\n          <input\n            type=\"radio\"\n            name=\"mark\"\n            value=\"necessary\"\n            id=\"necessary\"\n            required={mark === ''}\n            onChange={event => handleSelect(event)}\n          />\n          <label htmlFor=\"necessary\">Necessary</label>\n          <input\n            type=\"radio\"\n            name=\"mark\"\n            value=\"important\"\n            id=\"important\"\n            required={mark === ''}\n            onChange={event => handleSelect(event)}\n          />\n          <label htmlFor=\"important\">Important</label>\n          <input\n            type=\"radio\"\n            name=\"mark\"\n            value=\"meeting\"\n            id=\"meeting\"\n            required={mark === ''}\n            onChange={event => handleSelect(event)}\n          />\n          <label htmlFor=\"meeting\">Meeting</label>\n        </div>\n        <button\n          className=\"form__back\"\n          type=\"button\"\n          onClick={goBack}\n        >\n          Go back\n        </button>\n        <button className=\"form__add\" type=\"submit\">Add event</button>\n      </form>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  year: getYear(state),\n  month: getMonth(state),\n  day: getDay(state),\n  events: getEvents(state),\n});\n\nexport default connect(mapStateToProps, {\n  setEvents,\n  setIsShownEventForm,\n})(EventForm);\n\nEventForm.propTypes = {\n  year: (PropTypes.number || PropTypes.string).isRequired,\n  month: (PropTypes.number || PropTypes.string).isRequired,\n  day: (PropTypes.number || PropTypes.string).isRequired,\n  setEvents: PropTypes.func.isRequired,\n  setIsShownEventForm: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport './App.scss';\nimport { Months } from './components/calendar/Months';\nimport Month from './components/calendar/Month';\nimport DateForm from './components/DateForm';\nimport EventForm from './components/EventForm';\nimport {\n  getYear,\n  getMonth,\n  setMonth,\n  setYear,\n  setWeek,\n  getWeek,\n  getIsShownEventForm,\n} from './redux/store';\n\nconst App = ({\n  year,\n  month,\n  week,\n  setMonth,\n  setYear,\n  setWeek,\n  isShownEventForm,\n}) => {\n  const changeMonth = (param) => {\n    const datePlus = new Date(year, month + 1);\n    const dateMinus = new Date(year, month - 1);\n    const tempDate = param === -1 ? dateMinus : datePlus;\n\n    setYear(tempDate.getFullYear());\n    setMonth(tempDate.getMonth());\n  };\n\n  const changeYear = (param) => {\n    setYear(param === 1 ? year + 1 : year - 1);\n  };\n\n  const changeWeek = (param) => {\n    if (param === 1) {\n      setWeek(week === 4 ? 0 : week + 1);\n    } else {\n      setWeek(week === 0 ? 4 : week - 1);\n    }\n  };\n\n  return (\n    <>\n      {isShownEventForm\n        ? <EventForm />\n        : (\n          <>\n            <DateForm />\n            <div className=\"buttons\">\n              <button\n                className=\"buttons__prevYear\"\n                type=\"button\"\n                onClick={() => changeYear(-1)}\n                disabled={year === ''}\n              >\n                prevYear\n              </button>\n              {(year !== '' && (month || month === 0)) && (\n                <button\n                  className=\"buttons__prevMonth\"\n                  type=\"button\"\n                  onClick={() => changeMonth(-1)}\n                >\n                  prevMonth\n                </button>\n              )}\n              {(year !== '' && (week || week === 0))  && (\n                <button\n                  className=\"buttons__prevWeek\"\n                  type=\"button\"\n                  onClick={() => changeWeek(-1)}\n                >\n                  prevWeek\n                </button>\n              )}\n              {(year !== '' && (week || week === 0)) && (\n                <button\n                  className=\"buttons__nextWeek\"\n                  type=\"button\"\n                  onClick={() => changeWeek(1)}\n                >\n                  nextWeek\n                </button>\n              )}\n              {(year !== '' && (month || month === 0)) && (\n                <button\n                  className=\"buttons__nextMonth\"\n                  type=\"button\"\n                  onClick={() => changeMonth(1)}\n                >\n                  nextMonth\n                </button>\n              )}\n              <button\n                className=\"buttons__nextYear\"\n                type=\"button\"\n                onClick={() => changeYear(1)}\n                disabled={year === ''}\n              >\n                nextYear\n              </button>\n            </div>\n            {year !== '' && month === '' && (\n              <div className=\"App\">\n                <Months />\n              </div>\n            )}\n            {(year !== '' && (month || month === 0)) && <Month month={month} />}\n          </>\n        )}\n    </>\n  );\n};\n\nconst mapStateToProps = state => ({\n  year: getYear(state),\n  month: getMonth(state),\n  week: getWeek(state),\n  setMonth: getMonth(state),\n  setYear: getYear(state),\n  setWeek: getWeek(state),\n  isShownEventForm: getIsShownEventForm(state),\n});\n\nconst mapDispatchToProps = {\n  setMonth,\n  setYear,\n  setWeek,\n};\n\nApp.propTypes = {\n  year: (PropTypes.number || PropTypes.string).isRequired,\n  month: (PropTypes.number || PropTypes.string).isRequired,\n  week: (PropTypes.number || PropTypes.string).isRequired,\n  setMonth: PropTypes.func.isRequired,\n  setYear: PropTypes.func.isRequired,\n  setWeek: PropTypes.func.isRequired,\n  isShownEventForm: PropTypes.bool.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './redux/store';\n\nconst rootElement = document.getElementById('root');\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement,\n);\n"],"sourceRoot":""}